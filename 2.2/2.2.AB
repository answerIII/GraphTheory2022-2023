import numpy as np 
import math 
from collections import defaultdict

# A 

def temporal_weight(t_arr, t_min, t_max) -> (dict):

  t_weight = defaultdict(list)

  l = 0.2 
  t_minmax = t_max - t_min
  for t in t_arr: 

    tt = (t-t_min)/(t_minmax) 

    t_weight['linear'].append(l + (1-l)*(tt))
    t_weight['exponential'].append(l + (1-l)*((math.exp(3*tt) - 1) / (math.exp(3) - 1)))
    t_weight['square root'].append(l + (1-l)*(tt**0.5))


  return t_weight 

print(temporal_weight([5,6], 2, 7))

# B 

def past_event_aggregation(weight) -> (dict): 

  a = {}

  a['zeroth'], a['first'], a['second'], a['third'], a['fourth quantile'] = np.quantile(weight, [0, 0.25, 0.5, 0.75, 1])
   
  a['sum'] = sum(weight) 
  a['mean'] = np.mean(weight)
  a['variance'] = np.var(weight) 
  
  return a 
